r <- rast(archivos)
archivos <- list.files("Datos-ejemplos/", "tif",
full.names = T,
recursive = F)
archivos
r <- rast(archivos)
archivos <- list.files("Datos-ejemplos", "tif",
full.names = T,
recursive = F)
r <- rast(archivos)
r <- rast(archivos[[1]])
r <- rast(archivos[[2]])
knitr::opts_chunk$set(dev = 'pdf')
library(terra); library(foreach); library(spatstat)
archivos <- list.files("Datos-ejemplos", "tif",
full.names = T,
recursive = F)
r <- rast(archivos[[2]])
centroide <- global(r, mean)
r.df <- data.frame(rasterToPoints(r))
r.df <- as.data.frame(r, xy = T)
covar <- cov(r.df[, 3:5])
ncol(r)
ncol(r.df)
library(terra); library(foreach); library(spatstat)
archivos <- list.files("Datos-ejemplos", "tif",
full.names = T,
recursive = F)
r <- rast(archivos)
centroide <- global(r, mean)
r.df <- as.data.frame(r, xy = T)
covar <- cov(r.df[, 3:5])
md <- mahalanobis(r.df[, 3:5], center = centroide$mean, cov = covar)
head(md)
md
md.r <- rast(data.frame(r.df[, 1:2], md))
md.exp <- exp(-0.5*md.r)
plot(md.exp)
set.seed(182)
sam <- sample(1:nrow(r.df), 200, prob = exp(-0.5*md))
puntos.2 <- r.df[, 1:2][sam,]
set.seed(182)
sam <- sample(1:nrow(r.df), 200, prob = exp(-0.5*md))
puntos.2 <- data.frame(r.df[, 1:2][sam,])
puntos.2$x <- puntos.2$x + rnorm(200, 0, 0.05)
puntos.2$y <- puntos.2$y + rnorm(200, 0, 0.05)
plot(md.exp); points(puntos.2)
source("Funciones-spatstat/imFromStack.R")
source("Funciones-spatstat/winFromRaster.R")
source("Funciones-spatstat/plotQuantIntens.R")
r.im <- imFromStack(r)
w <- winFromRaster(r)
puntos.2.ppp <- ppp(x = puntos.2$x,
y = puntos.2$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.2.ppp, W = as.owin(w))
K <- envelope(puntos.2.ppp, fun = Kest, nsim = 39)
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.2.ppp,
dir = "",
name = "Respuestas-centroide")
curve(exp(1 + x - x^2), from = -3, 3)
pairs(r)
m1 <- ppm(Q = puntos.2.ppp,
trend = ~ Var.1 + Var.3 + I(Var.1^2) + I(Var.3^2),
covariates = r.im)
names(r.im)
r.im <- imFromStack(r)
names(r.im) <- paste("Var", 1:3, sep = ".")
w <- as.owin(r.im[[1]])
puntos.2.ppp <- ppp(x = puntos.2$x,
y = puntos.2$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.2.ppp, W = as.owin(w))
K <- envelope(puntos.2.ppp, fun = Kest, nsim = 39)
plot(K)
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.2.ppp,
dir = "",
name = "Respuestas-centroide")
curve(exp(1 + x - x^2), from = -3, 3)
pairs(r)
m1 <- ppm(Q = puntos.2.ppp,
trend = ~ Var.1 + Var.3 + I(Var.1^2) + I(Var.3^2),
covariates = r.im)
m2 <- ppm(Q = puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im)
AIC(m1); AIC(m2)
sum.m1 <- summary(m1)
knitr::kable(sum.m1$coefs.SE.CI[, 1:5])
par(mar = c(2,2,2,2))
diagnose.ppm(m1, main = "", cex.axis = 0.25)
par(mar = c(2,2,2,2))
diagnose.ppm(m2, main = "", cex.axis = 0.25)
K1 <- envelope(m1, fun = Kest, nsim = 39)
K2 <- envelope(m2, fun = Kest, nsim = 39)
plot(K1, cex = 0.5)
plot(K2, cex = 0.5)
plot(m1, se = F, main = "")
pred <- predict(m1)
pred.r <- rast(pred)
writeRaster(pred.r, "Predicción-m1", "GTiff",
overwrite = T)
pred <- predict(m1)
pred.r <- rast(pred)
writeRaster(pred.r, "Predicción-m1.tif",
overwrite = T)
rr <- data.frame(r=seq(1,5,by=1))
p <- profilepl(rr, Strauss,
puntos.2.ppp ~ Var.1 + Var.3 + I(Var.1^2) + I(Var.3^2),
covariates = r.im, aic=T, rbord = 0.5)
plot(p, main = "")
m1.int <- ppm(Q = puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
Strauss(p$iopt), rbord = 1) #Interacción
sum.int <- summary(m1.int)
knitr::kable(sum.int$coefs.SE.CI[, 1:4])
library(terra); library(foreach); library(spatstat)
archivos <- list.files("Datos-ejemplos", "tif",
full.names = T,
recursive = F)
r <- rast(archivos)
r <- scale(r)
centroide <- global(r, mean)
r.df <- as.data.frame(r, xy = T)
covar <- cov(r.df[, 3:5])
md <- mahalanobis(r.df[, 3:5], center = centroide$mean, cov = covar)
head(md)
md.r <- rast(data.frame(r.df[, 1:2], md))
md.exp <- exp(-0.5*md.r)
plot(md.exp)
set.seed(182)
sam <- sample(1:nrow(r.df), 200, prob = exp(-0.5*md))
puntos.2 <- data.frame(r.df[, 1:2][sam,])
puntos.2$x <- puntos.2$x + rnorm(200, 0, 0.05)
puntos.2$y <- puntos.2$y + rnorm(200, 0, 0.05)
plot(md.exp); points(puntos.2)
source("Funciones-spatstat/imFromStack.R")
source("Funciones-spatstat/winFromRaster.R")
source("Funciones-spatstat/plotQuantIntens.R")
r.im <- imFromStack(r)
names(r.im) <- paste("Var", 1:3, sep = ".")
w <- as.owin(r.im[[1]])
puntos.2.ppp <- ppp(x = puntos.2$x,
y = puntos.2$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.2.ppp, W = as.owin(w))
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.2.ppp,
dir = "",
name = "Respuestas-centroide")
curve(exp(1 + x - x^2), from = -3, 3)
pairs(r)
m1 <- ppm(Q = puntos.2.ppp,
trend = ~ Var.1 + Var.3 + I(Var.1^2) + I(Var.3^2),
covariates = r.im)
m2 <- ppm(Q = puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im)
AIC(m1); AIC(m2)
sum.m1 <- summary(m1)
knitr::kable(sum.m1$coefs.SE.CI[, 1:5])
par(mar = c(2,2,2,2))
diagnose.ppm(m1, main = "", cex.axis = 0.25)
plot(m1, se = F, main = "")
pred <- predict(m1)
pred.r <- rast(pred)
writeRaster(pred.r, "Predicción-m1.tif",
overwrite = T)
rr <- data.frame(r=seq(1,5,by=1))
p <- profilepl(rr, Strauss,
puntos.2.ppp ~ Var.1 + Var.3 + I(Var.1^2) + I(Var.3^2),
covariates = r.im, aic=T, rbord = 0.5)
rr <- data.frame(r=seq(1,5,by=1))
p <- profilepl(rr, Strauss,
puntos.2.ppp ~ Var.1 + Var.3 + I(Var.1^2) + I(Var.3^2),
covariates = r.im, aic=F, rbord = 0.1)
plot(p, main = "")
p$iopt
m1.int <- ppm(Q = puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
AreaInter(rr$r[p$iopt]), rbord = 0.1) #Interacción
sum.int <- summary(m1.int)
knitr::kable(sum.int$coefs.SE.CI[, 1:4])
coef(m1)
coef(m1.int)
K.int <- envelope(m1.int, Kest, nsim = 39)
plot(K.int)
plot(m1.int, se = F, trend = T, cif = F)
plot(m1.int, se = F, trend = T, cif = T)
plot(m1.int, se = F, trend = T, cif = F)
plot(m1.int, se = F, trend = T, cif = T)
plot(m1)
plot(m1.int, se = F, trend = T, cif = F)
plot(m1, se = F, trend = T)
par(mfrow = c(1, 2))
plot(m1, se = F, trend = T, main = "Poisson")
plot(m1.int, se = F, trend = T, cif = F, main = "Interacción")
m1.lgcp <- kppm(puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
clusters = "LGCP",
statistic = "K", # K de Ripley
method = "clik2", # Contraste con K
model = "exp") # Modelo de varianza
m1.lgcp <- kppm(puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
clusters = "Thomas",
statistic = "K", # K de Ripley
method = "mincon", # Contraste con K
model = "exp")
sum.lgcp <- summary(m1.lgcp)
knitr::kable(sum.lgcp$coefs.SE.CI[, 1:4])
plot(m1.lgcp, what = "intensity")
K.lgcp <- envelope(m1.lgcp, Kest, nsim = 39)
plot(K.lgcp)
par(mfrow = c(1, 3))
plot(m1, se = F, trend = T, main = "Poisson")
plot(m1.int, se = F, trend = T, cif = F, main = "Interacción")
plot(m1.lgcp, what = "intensity", main = "LGCP")
plot(m1.lgcp, what = "cluster", main = "LGCP")
plot(m1.lgcp, what = "statistic", main = "LGCP")
m1.lgcp <- kppm(puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
clusters = "LGCP",
statistic = "K", # K de Ripley
method = "mincon", # Contraste con K
model = "exp")
m1.lgcp <- kppm(puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
clusters = "Thomas",
statistic = "K", # K de Ripley
method = "mincon", # Contraste con K
model = "exp")
m1.lgcp <- kppm(puntos.2.ppp,
trend = ~ Var.2 + Var.3 + I(Var.2^2) + I(Var.3^2),
covariates = r.im,
clusters = "LGCP",
statistic = "K", # K de Ripley
method = "mincon")
sum.lgcp <- summary(m1.lgcp)
sum.lgcp
par(mfrow = c(1, 3))
plot(m1, se = F, trend = T, main = "Poisson")
plot(m1.int, se = F, trend = T, cif = F, main = "Interacción")
plot(m1.lgcp, what = "intensity", main = "LGCP")
m1
m2
par(mfrow = c(1, 3))
plot(m2, se = F, trend = T, main = "Poisson")
plot(m1.int, se = F, trend = T, cif = F, main = "Interacción")
plot(m1.lgcp, what = "intensity", main = "LGCP")
K.lgcp <- envelope(m1.lgcp, Kest, nsim = 39)
plot(K.lgcp)
knitr::opts_chunk$set(dev = 'pdf')
r <- rast("Datos/Bioclim-CHELSA.tif")
library(terra); library(foreach); library(spatstat)
library(terra); library(foreach); library(spatstat)
r <- rast("Datos/Bioclim-CHELSA.tif")
r <- scale(r)
fav.real <- rast("Datos/Fav-real.tif")
plot(fav.real)
```{r echo = F, message=F, warning=F}
library(terra); library(foreach); library(spatstat)
r <- rast("Datos/Bioclim-CHELSA.tif")
r <- scale(r)
pres <- read.csv("Datos/Puntos.csv")
pres |> head()
fav.real <- rast("Datos/Fav-real.tif")
plot(fav.real); points(pres, col = "red", pch = 20, cex = 0.1)
fav.real <- rast("Datos/Fav-real.tif")
plot(fav.real); points(pres, col = "red", pch = 20, cex = 0.05)
fav.real <- rast("Datos/Fav-real.tif")
par(mfrow = c(1, 2))
plot(fav.real)
plot(fav.real); points(pres, col = "red", pch = 20, cex = 0.05)
plot(md.exp); points(puntos.2)
source("Funciones-spatstat/imFromStack.R")
source("Funciones-spatstat/plotQuantIntens.R")
r.im <- imFromStack(r)
names(r.im) <- paste("Var", 1:3, sep = ".")
w <- as.owin(r.im[[1]])
puntos.2.ppp <- ppp(x = puntos.2$x,
y = puntos.2$y,
window = w,
check = F)
library(terra); library(foreach); library(spatstat)
r <- rast("Datos/Bioclim-CHELSA.tif")
r <- scale(r)
puntos <- read.csv("Datos/Puntos.csv")
r.im <- imFromStack(r)
names(r.im) <- paste("Var", 1:3, sep = ".")
w <- as.owin(r.im[[1]])
puntos.ppp <- ppp(x = puntos$x,
y = puntos$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.ppp, W = as.owin(w))
puntos.v <- vect(data.frame(lon = puntos$x, lat = puntos$y)[1:15, ])
b <- lapply(seq(0.1, 0.5, by = 0.1), function(x){buffer(puntos.v, x)})
plot(puntos.v, pch = 20, cex = 0.5, col = "red")
for(i in seq_along(b)){lines(b[[i]], col = "grey")}
no.vec <- data.frame(Radio = seq(0.1, 0.5, by = 0.1),
Vecinos = c(0, 1/15, 3/15, 4/15, 4/15))
knitr::kable(no.vec)
plot(Vecinos ~ Radio, data = no.vec, type = "s")
K <- envelope(puntos.ppp, fun = Kest, nsim = 39)
plot(K)
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.ppp,
dir = "",
name = "Respuestas-centroide")
library(terra); library(foreach); library(spatstat)
r <- rast("Datos/Bioclim-CHELSA.tif")
r <- scale(r)
puntos <- read.csv("Datos/Puntos.csv")[sample(1:6000, 200), ]
fav.real <- rast("Datos/Fav-real.tif")
par(mfrow = c(1, 2))
plot(fav.real)
plot(fav.real); points(puntos, col = "red", pch = 20, cex = 0.05)
source("Funciones-spatstat/imFromStack.R")
source("Funciones-spatstat/plotQuantIntens.R")
source("Funciones-spatstat/findCompatibles.R")
source("Funciones-spatstat/getPolyFormulas.R")
source("Funciones-spatstat/ppmBatchFit.R")
r.im <- imFromStack(r)
names(r.im) <- paste("Var", 1:3, sep = ".")
w <- as.owin(r.im[[1]])
puntos.ppp <- ppp(x = puntos$x,
y = puntos$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.ppp, W = as.owin(w))
puntos.v <- vect(data.frame(lon = puntos$x, lat = puntos$y)[1:15, ])
b <- lapply(seq(0.1, 0.5, by = 0.1), function(x){buffer(puntos.v, x)})
plot(puntos.v, pch = 20, cex = 0.5, col = "red")
for(i in seq_along(b)){lines(b[[i]], col = "grey")}
no.vec <- data.frame(Radio = seq(0.1, 0.5, by = 0.1),
Vecinos = c(0, 1/15, 3/15, 4/15, 4/15))
knitr::kable(no.vec)
K <- envelope(puntos.ppp, fun = Kest, nsim = 39)
plot(K)
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.ppp,
dir = "",
name = "Respuestas-centroide")
fav.real <- rast("Datos/Fav-real.tif")
par(mfrow = c(1, 2))
plot(fav.real)
plot(fav.real); points(puntos, col = "red", pch = 20, cex = 0.05)
source("Funciones-spatstat/imFromStack.R")
source("Funciones-spatstat/plotQuantIntens.R")
source("Funciones-spatstat/findCompatibles.R")
source("Funciones-spatstat/getPolyFormulas.R")
source("Funciones-spatstat/ppmBatchFit.R")
r.im <- imFromStack(r)
names(r.im) <- paste("Var", 1:3, sep = ".")
w <- as.owin(r.im[[1]])
puntos.ppp <- ppp(x = puntos$x,
y = puntos$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.ppp, W = as.owin(w))
puntos.v <- vect(data.frame(lon = puntos$x, lat = puntos$y)[1:15, ])
b <- lapply(seq(0.1, 0.5, by = 0.1), function(x){buffer(puntos.v, x)})
plot(puntos.v, pch = 20, cex = 0.5, col = "red")
for(i in seq_along(b)){lines(b[[i]], col = "grey")}
no.vec <- data.frame(Radio = seq(0.1, 0.5, by = 0.1),
Vecinos = c(0, 1/15, 3/15, 4/15, 4/15))
knitr::kable(no.vec)
plot(Vecinos ~ Radio, data = no.vec, type = "s")
K <- envelope(puntos.ppp, fun = Kest, nsim = 39)
plot(K)
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.ppp,
dir = "",
name = "Respuestas-centroide")
plot(puntos.ppp)
plot(r[[1]])
plot(r.im[[1]])
names(r)
names(r.im)
library(terra); library(foreach); library(spatstat)
r <- aggregate(rast("Datos/Bioclim-CHELSA.tif"), 2)
r <- round(scale(r), 2)
puntos <- read.csv("Datos/Puntos.csv")[sample(1:6000, 200), ]
source("Funciones-spatstat/imFromStack.R")
source("Funciones-spatstat/plotQuantIntens.R")
source("Funciones-spatstat/findCompatibles.R")
source("Funciones-spatstat/getPolyFormulas.R")
source("Funciones-spatstat/ppmBatchFit.R")
r.im <- imFromStack(r)
names(r.im) <- names(r)
w <- as.owin(r.im[[1]])
puntos.ppp <- ppp(x = puntos$x,
y = puntos$y,
window = w,
check = F)
Q <- pixelquad(X = puntos.ppp, W = as.owin(w))
puntos.v <- vect(data.frame(lon = puntos$x, lat = puntos$y)[1:15, ])
b <- lapply(seq(0.1, 0.5, by = 0.1), function(x){buffer(puntos.v, x)})
plot(puntos.v, pch = 20, cex = 0.5, col = "red")
for(i in seq_along(b)){lines(b[[i]], col = "grey")}
K <- envelope(puntos.ppp, fun = Kest, nsim = 39)
plot(K)
plotQuantIntens(imList = r.im,
noCuts = 5,
Quad = Q,
p.pp = puntos.ppp,
dir = "",
name = "Respuestas-centroide")
compatibles <- findCompatibles(r, thres = 0.6, max.comb = 3)
compatibles
compatibles <- findCompatibles(r, thres = 0.6, max.comb = 4)
compatibles
knitr::kable(head(compatibles))
View(getPolyFormulas())
View(getPolyFormulas)
names(r)
formulas  <- getPolyFormulas(respDF = expo, compatMat = compatibles)
View(getPolyFormulas)
formulas  <- getPolyFormulas(respDF = expon, compatMat = compatibles)
expon <- read.csv("Datos/Tabla-coefs.csv")
formulas  <- getPolyFormulas(respDF = expon, compatMat = compatibles)
compatibles
expon
expon <- read.csv("Datos/Tabla-coefs.csv")
formulas  <- getPolyFormulas(respDF = expon, compatMat = compatibles)
length(formulas)
expon <- read.csv("Datos/Tabla-coefs.csv")
formulas  <- getPolyFormulas(respDF = expon, compatMat = compatibles)
formulas[1:5]
compatibles <- findCompatibles(r, thres = 0.5, max.comb = 3)
knitr::kable(head(compatibles))
expon <- read.csv("Datos/Tabla-coefs.csv")
formulas  <- getPolyFormulas(respDF = expon, compatMat = compatibles)
formulas[1:5]
length(formulas)
modelos <- ppmBatchFit(points = puntos,
covariates = r,
formulas = formulas[1:10],
parallel = F,
topModels = 5)
r
modelos <- ppmBatchFit(points = puntos,
covariates = r,
formulas = formulas[1:10],
parallel = F,
topModels = 5)
View(ppmBatchFit())
View(ppmBatchFit)
plot(r)
source("Spatstat-functions/imFromStack.R")
covaariates <- r
imList <- imFromStack(covaariates)
names(imList) <- names(covariates)
imList <- imFromStack(covariates)
covariates <- r
imList <- imFromStack(covariates)
names(imList) <- names(covariates)
win <- as.owin(imList[[1]])
points.pp <- ppp(x = points$x, y = points$y, window = win, check = F)
Q <- quadscheme(points.pp)
class(puntos)
modelos <- ppmBatchFit(points = puntos,
covariates = r,
formulas = formulas[1:10],
parallel = F,
topModels = 5)
source("~/Documentos/Cosas ENES/Materias/Posgrado/PCMyL/Curso-modelado-nichos/Funciones-spatstat/ppmBatchFit.R")
modelos <- ppmBatchFit(points = puntos,
covariates = r,
formulas = formulas[1:10],
parallel = F,
topModels = 5)
knitr::include_graphics("Figuras/Patrón-puntos.png")
knitr::include_graphics("Figuras/Tipos-puntos.png")
knitr::include_graphics("Figuras/Ejemplo-patron-puntos.png")
knitr::include_graphics("Figuras/Tipos-puntos-med.png")
knitr::include_graphics("Figuras/Conteos-estimacion.png")
knitr::include_graphics("Figuras/1-3D.png")
knitr::include_graphics("Figuras/Covariables.png")
knitr::include_graphics("Figuras/Equivalencia-maxent.png")
knitr::include_graphics("Figuras/Maxent-PPMs.png")
set.seed(123)
x <- rnorm(100)
beta <- rnorm(100, 0, 1)
y <- x + beta
df <- data.frame(x = x, y = y)
knitr::kable(head(df))
with(df, plot(x, y, col = "red"))
